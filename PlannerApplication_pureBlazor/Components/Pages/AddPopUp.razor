@using PlannerCSharp.DataAccessLayer
@inject NavigationManager _navigationManager


<PopUp @ref="modal" OnSave="Save" OnClose="Reset">
    <div class="new-task-header-box">
        <h3 style="text-align: center;">New Task</h3>
    </div>
    <form class="form-field" @onsubmit="Validate">
        <div class="mb-3 row one-row">
            <div class="col-sm-2 icon-label-wrapper">
                <i class="bi bi-pencil"></i>
                <label for="inputTitle" class="col-form-label">Title</label>
            </div>
            
            @if (isValid)
            {
                <div class="col-sm-10">
                    <input type="text" class="form-control" id="inputTitle" @bind-value="title" placeholder="Enter Title...">
                </div>
            }
            else
            {
                <div class="col-sm-10">
                    <input type="text" class="form-control invalid2" id="inputTitle" @bind-value="title" placeholder="Required: Enter Title...">
                </div>
            }

        </div>
        <div class="mb-3 row one-row">
            <div class="col-sm-2 icon-label-wrapper"> 
                <i class="bi bi-calendar-event"></i>
                <label for="inputBeginDate" class="col-sm-2 col-form-label">Date</label>
            </div>
            <div class="col-sm-10">
                <InputDate @bind-Value="date_of_task" class="form-control" id="inputBeginDate"></InputDate>
            </div>
        </div>
        <div class="mb-3 row one-row">
            <div class="col-sm-2 icon-label-wrapper">
                <i class="bi bi-arrow-repeat"></i>
                <label for="inputRepeat" class="col-sm-2 col-form-label">
                    Repeat
                </label>
            </div>
            <div class="col-sm-10">
                <input type="radio" class="btn-check" name="options" id="option1" autocomplete="off" checked @onchange="@(() => SetRepeat("never"))">
                <label class="btn btn-secondary button-size" for="option1">Never</label>

                <input type="radio" class="btn-check" name="options" id="option2" autocomplete="off" @onchange="@(() => SetRepeat("daily"))">
                <label class="btn btn-secondary button-size" for="option2">Daily</label>

                <input type="radio" class="btn-check" name="options" id="option3" autocomplete="off" @onchange="@(() => SetRepeat("weekly"))">
                <label class="btn btn-secondary button-size" for="option3">Weekly</label>

                <input type="radio" class="btn-check" name="options" id="option4" autocomplete="off" @onchange="@(() => SetRepeat("monthly"))">
                <label class="btn btn-secondary button-size" for="option4">Monthly</label>

                <input type="radio" class="btn-check" name="options" id="option5" autocomplete="off" @onchange="@(() => SetRepeat("yearly"))">
                <label class="btn btn-secondary button-size" for="option5">Yearly</label>
            </div>
        </div>

        <div class="mb-3 row one-row">
            <div class="col-sm-2 icon-label-wrapper">
                <i class="bi bi-calendar-event"></i>
                <label for="inputEnd" class="col-sm-2 col-form-label">
                    End
                </label>
            </div>
            <div class="col-sm-10 change-centering">
                @if (repeat == "never")
                {
                    <input type="radio" disabled class="btn-check" name="options2" id="optionno" autocomplete="off" checked @onchange="@(() => SetEnd(false))">
                    <label class="btn btn-secondary button-size" for="optionno">No</label>

                    <input type="radio" disabled class="btn-check" name="options2" id="optionyes" autocomplete="off" @onchange="@(() => SetEnd(true))">
                    <label class="btn btn-secondary button-size" for="optionyes">Yes</label>



                }
                else
                {
                    <input type="radio" class="btn-check" name="options2" id="optionno" autocomplete="off" checked @onchange="@(() => SetEnd(false))">
                    <label class="btn btn-secondary button-size" for="optionno">No</label>

                    <input type="radio" class="btn-check" name="options2" id="optionyes" autocomplete="off" @onchange="@(() => SetEnd(true))">
                    <label class="btn btn-secondary button-size" for="optionyes">Yes</label>



                }

                @if (repeat == "never" || hasEnd == false)
                {
                    <InputDate @bind-Value="date_of_task_end" disabled class="form-control datepick" id="inputEndDate"></InputDate>
                }
                else
                {
                    <InputDate @bind-Value="date_of_task_end" class="form-control datepick" id="inputEndDate"></InputDate>
                }




            </div>
        </div>

        <div class="mb-3 row one-row">
            <div class="col-sm-2 icon-label-wrapper">
                <i class="bi bi-ui-checks-grid"></i>
                <label for="inputType" class="col-sm-2 col-form-label">
                    Type
                </label>
            </div>
            <div class="col-sm-10 ">
                <input type="radio" class="btn-check" name="options3" id="optionoffice" autocomplete="off" checked @onchange="@(() => SetType("office"))">
                <label class="btn btn-secondary button-size" for="optionoffice">Office</label>

                <input type="radio" class="btn-check" name="options3" id="optionhome" autocomplete="off" @onchange="@(() => SetType("home"))">
                <label class="btn btn-secondary button-size" for="optionhome">Home</label>





            </div>
        </div>


    </form>


</PopUp>
@code {
    public bool isValid { get; set; } = true;
    public string title;
    public DateOnly date_of_task = DateOnly.FromDateTime(DateTime.Now);
    public DateOnly date_of_task_end = DateOnly.FromDateTime(DateTime.Now);
    public string repeat = "never";
    public bool hasEnd = false;
    public string user = "fran";
    public string type = "office";

    private PopUp modal;

    private void SetType(string t)
    {
        type = t;
    }

    public void ShowModal()
    {
        modal.Show();
    }

    private void SetRepeat(string rep)
    {

        repeat = rep;
        Console.WriteLine(rep);
    }

    private void Validate()
    {
        Console.WriteLine($"Title: {title}, Date: {date_of_task}, Repeat: {repeat}, End:{hasEnd}");
    }

    private void SetEnd(bool end)
    {

        hasEnd = end;
        Console.WriteLine(hasEnd);
    }

    public void Save()
    {
        DatabaseRequest insert_new_task;
        if (!String.IsNullOrEmpty(title))
        {
            if (!hasEnd)
            {
                if (repeat == "never")
                {
                    insert_new_task = new DatabaseRequest("INSERT INTO todo_items (title, begindate, enddate, repeat, type, username) "
                + $"VALUES ('{title}', '{date_of_task.ToString("yyyy-MM-dd")}', '{date_of_task_end.ToString("yyyy-MM-dd")}', '{repeat}', '{type}', '{user}');");
                } else
                {
                    insert_new_task = new DatabaseRequest("INSERT INTO todo_items (title, begindate, enddate, repeat, type, username) "
                + $"VALUES ('{title}', '{date_of_task.ToString("yyyy-MM-dd")}', '{DateOnly.MaxValue.ToString("yyyy-MM-dd")}', '{repeat}', '{type}', '{user}');");
                }

            }
            else
            {
                insert_new_task = new DatabaseRequest("INSERT INTO todo_items (title, begindate, enddate, repeat, type, username) "
                + $"VALUES ('{title}', '{date_of_task.ToString("yyyy-MM-dd")}', '{date_of_task_end.ToString("yyyy-MM-dd")}', '{repeat}', '{type}', '{user}');");

            }



            DatabaseResponse resp = insert_new_task.PerformQuery();
            Console.WriteLine($"Title: {title}, Date: {date_of_task}, Repeat: {repeat}, End:{hasEnd}, Date: {date_of_task_end}, Type: {type}");

            modal.Close();
            _navigationManager.NavigateTo(_navigationManager.Uri, true);

        }
        else
        {
            isValid = false;
        }

    }

    public void Reset()
    {
        title = "";
        date_of_task = DateOnly.FromDateTime(DateTime.Now);
        date_of_task_end = DateOnly.FromDateTime(DateTime.Now);
        repeat = "never";
        hasEnd = false;
        isValid = true;
        type = "office";
    }


}
