@page "/"
@using PlannerApplication_pureBlazor.Components.Layout
@using PlannerCSharp.DataAccessLayer

@inject NavigationManager _navigationManager
@rendermode InteractiveServer

<PageTitle>ToDos</PageTitle>

<div class="page">

    <NavMenu @ref=navBar OnDateChange="Reload"/>


    <main>

        <AddPopUp @ref=newTaskWindow>

        </AddPopUp>

        <EditTaskPopUp @ref=editTaskWindow>

        </EditTaskPopUp>
        <h1>@(date_today.ToString("yyyy-MM-dd"))'s ToDos</h1>
        <div class="office">
            <h2>Office</h2>
            <div class="list-group">
                @foreach (var todo in todos)
				{
					if (todo.Type == "office")
					{
						<ToDoItem TaskItem="@todo" SelectedDate="@date_today" editTaskWindow="@editTaskWindow" />
                    }
                }
            </div>
        </div>
        <div class="home">
            <h2>Home</h2>
            <div class="list-group">
                @foreach (var todo in todos)
				{
					if (todo.Type == "home")
					{
						<ToDoItem TaskItem="@todo" SelectedDate="@date_today" editTaskWindow="@editTaskWindow" />
                    }
                }
            </div>
        </div>
        <div class="container_button">
            <button type="button" class="btn btn-success btn-lg shadow-button" style="border-radius: 100%;" @onclick="@(() =>newTaskWindow.ShowModal())">
                <i class="bi bi-plus-lg" style="font-size: 30px; font-weight: 900;"></i>
            </button>
        </div>
    </main>
</div>


@code {




    private DateOnly date_today;
    private NavMenu navBar;
    private AddPopUp newTaskWindow;
    private EditTaskPopUp editTaskWindow;
    private List<ToDoTask> todos = new List<ToDoTask>();


    public void Reload()
    {
        todos.Clear();
        date_today = navBar.SelectedDay;
        DatabaseRequest request = new DatabaseRequest($"SELECT * FROM ToDo_Items WHERE enddate >= '{date_today.ToString("yyyy-MM-dd")}' AND begindate <= '{date_today.ToString("yyyy-MM-dd")}' ORDER BY title ASC; ");
        getRelevantToDos(request.PerformQuery());
        StateHasChanged();
    }



    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Reload();
        }
        
        
    }

    private void getRelevantToDos(DatabaseResponse response)
    {

        for (int i = 0; i < response.Rows; i++)
        {
            ToDoTask t = new ToDoTask();
            t.Title = response["title"][i];
            t.EndDate = DateOnly.Parse(response["enddate"][i]);
            t.BeginDate = DateOnly.Parse(response["begindate"][i]);
            t.Type = response["type"][i];
            t.Id = int.Parse(response["id"][i]);
            t.Repeat = response["repeat"][i];
            t.Username = response["username"][i];

            if (repeatToday(t.Repeat, t.BeginDate)){
                todos.Add(t);
            }

		}
    }

    private bool repeatToday(string repeat, DateOnly date)
	{
		if (repeat == "daily")
		{
			return true;
		}
		else if (repeat == "weekly")
		{
			if (date_today.DayOfWeek == date.DayOfWeek)
			{
				return true;
			}
		}
		else if (repeat == "monthly")
		{
			if (date_today.Day == date.Day)
			{
				return true;
			}
		}
		else if (repeat == "yearly")
		{
            if (date_today.Day == date.Day && date_today.Month == date.Month)
			{
				return true;
			}
		} 
        else if (repeat == "never")
        {
            return true;
        }
		return false;
	}

   

    
    
}
